#!/usr/bin/env coffee

###
Module dependencies.
###
sys = require 'util'
fs = require "fs"
program = require "commander"
path = require "path"
basename = path.basename
dirname = path.dirname
resolve = path.resolve
exists = fs.existsSync or path.existsSync
join = path.join
mkdirp = require "mkdirp"
jade = require "../"

###
Compile from stdin.
###
stdin = ->
	buf = ""
	process.stdin.setEncoding "utf8"
	process.stdin.on "data", (chunk) ->
		buf += chunk

	process.stdin.on("end", ->
		fn = jade.compile(buf, options)
		output = (if options.client then fn.toString() else fn(options))
		process.stdout.write output
	).resume()

###
Process the given path, compiling the jade files found.
Always walk the subdirectories.
###
renderFile = (path) ->
	re = /\.jade$/
	fs.lstat path, (err, stat) ->
		throw err  if err
		
		# Found jade file
		if stat.isFile() and re.test(path)
			fs.readFile path, "utf8", (err, str) ->
				throw err  if err
				options.filename = path
				fn = jade.compile(str, options)
				extname = (if options.client then ".js" else ".html")
				path = path.replace(re, extname)
				path = join(program.out, basename(path))  if program.out
				dir = resolve(dirname(path))
				mkdirp(dir, 0o0755, (err) ->
					throw err  if err
					output = (if options.client then fn.toString() else fn(options))
					fs.writeFile path, output, (err) ->
						throw err  if err
						console.log "  \u001b[90mrendered \u001b[36m%s\u001b[0m", path
				)
		# Found directory
		else if stat.isDirectory()
			fs.readdir path, (err, files) ->
				throw err  if err
				files.map((filename) ->
					path + "/" + filename
				).forEach renderFile

# jade options
options = {}

# options
program
	.version(
		JSON.parse(fs.readFileSync(path.normalize(__dirname + '/../package.json'), "utf8")).version
	)
	.usage("[options] [dir|file ...]")
	.option("-o, --obj <str>", "javascript options object")
	.option("-O, --out <dir>", "output the compiled html to <dir>")
	.option("-p, --path <path>", "filename used to resolve includes")
	.option("-P, --pretty", "compile pretty html output")
	.option("-c, --client", "compile function for client-side runtime.js")
	.option("-D, --no-debug", "compile without debugging (smaller functions)")
	.option "-w, --watch", "watch files for changes and automatically re-render"

program.on "--help", ->
	console.log """
	Examples:
	    # translate jade the templates dir
	    $ jade templates

	    # create {foo,bar}.html
	    $ jade {foo,bar}.jade

	    # jade over stdio
	    $ jade < my.jade > my.html

	    # jade over stdio
	    $ echo \"h1 Jade!\" | jade

	    # foo, bar dirs rendering to /tmp
	    $ jade foo bar --out /tmp
	"""

program.parse process.argv

# options given, parse them
if program.obj
	if exists(program.obj)
		options = JSON.parse(fs.readFileSync(program.obj))
	else
		options = eval_("(" + program.obj + ")")

# --filename
options.filename = program.path if program.path

# --no-debug
options.compileDebug = program.debug

# --client
options.client = program.client

# --pretty
options.pretty = program.pretty

# --watch
options.watch = program.watch

# left-over args are file paths
files = program.args

# compile files
if files.length
	console.log()
	files.forEach renderFile
	if options.watch
		files.forEach (file) ->
			fs.watchFile file,
				interval: 100,
				(curr, prev) ->
					renderFile file if curr.mtime > prev.mtime
	process.on "exit", ->
		console.log()
# stdio
else
	stdin()


