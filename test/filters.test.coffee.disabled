jade = require("../")
assert = require("assert")

# Shortcut
Visitor = (node) ->
	@node = node

Compiler = jade.Compiler
nodes = jade.nodes
render = (str, options) ->
	fn = jade.compile(str, options)
	fn options

jade.filters.conditionals = (block, compiler) ->
	new Visitor(block).compile()

Visitor::__proto__ = Compiler::
Visitor::visit = (node) ->
	@visitNode node

Visitor::visitTag = (node) ->
	switch node.name
		when "or"
			block = node.block
			node = new nodes.Code("else")
			node.block = block
			node.instrumentLineNumber = false
			@visit node
		else
			Compiler::visitTag.call this, node

module.exports =
	"test :cdata filter": ->
		assert.equal "<![CDATA[\nfoo\n]]>", render(":cdata\n  foo")
		assert.equal "<![CDATA[\nfoo\nbar\n]]>", render(":cdata\n  foo\n  bar")
		assert.equal "<![CDATA[\nfoo\nbar\n]]><p>something else</p>", render(":cdata\n  foo\n  bar\np something else")

	"test parse tree": ->
		str = ["conditionals:", "  if false", "    | oh noes", "  or", "    if null == false", "      p doh", "    or", "      p amazing!"].join("\n")
		html = ["<p>amazing!</p>"].join("")
		assert.equal html, render(str)

	"test filter attrs": ->
		jade.filters.testing = (str, attrs) ->
			str + " " + attrs.stuff

		str = [":testing(stuff)", "  foo bar"].join("\n")
		assert.equal "foo bar true", render(str)
